scalar JSON
scalar Date
scalar GraphQLObject

type Query {
    projects(filter: ProjectsFilter): [Project]
    project(id: Int!): Project
    repositories(filter: RepositoryFilter): [Repository]
    gitRepository(name: String!, projectId: Int!): Repository
    repository(id: Int!): Repository
    commits(filter: CommitFilter): [Commit]
    branches(filter: BranchFilter): [Branch]
    repositoryTags(filter: RepositoryTagFilter): [RepositoryTag]
    mrs(filter: MergeRequestFilter): [MergeRequest]
    mr(ID: Int!): MergeRequest
    tasks(filter: TasksFilter): [Task]
    task(id: Int!): Task
    todos(filter: TodoFilter): [Todo] # 1 week
    todo(id: Int): Todo
    tags: [Tag]
    tag(id: Int): Tag
    events(filter: EventFilter): [Event]
    event(id: Int): Event
    notifications: [Notification]
    notification(id: Int): Notification
    comments: [Comment]
    comment(id: Int): Comment
    users(filter: UserFilter): [User]
    user(id: Int): User
    teams: [Team]
    team(id: Int): Team
    chats(filter: ChatFilter): [Chat]
    chat(id: Int): Chat
    messages(filter: MessageFilter, pagination: Pagination): [Message]
    message(id: Int): [Message]
    check(token: String!): AuthOutput
}

type Mutation {

#    addUser(input: UserInput!): User!
    updateUser(id: Int!, input: ProfileInput!): User!
#    deleteUser(id: Int!): Boolean

    addProject(input: ProjectInput!): Project!
    updateProject(id: Int!, input: ProjectInput!): Project!
    deleteProject(id: Int!): Boolean

    addRepository(input: RepositoryInput!): Repository!
    updateRepository(id: Int!, input: RepositoryInput!): Repository!
    deleteRepository(id: Int!): Boolean

    addTask(input: TaskInput!): Task!
    updateTask(id: Int!, input: TaskInput!): Task!
    deleteTask(id: Int!): Boolean

    addTag(input: TagInput!): Tag!
    updateTag(id: Int!, input: TagInput!): Tag!
    deleteTag(id: Int!): Boolean

    addTodo(input: TodoInput!): Todo!
    updateTodo(id: Int!, input: TodoInput!): Todo!
    deleteTodo(id: Int!): Boolean

    addComment(input: CommentInput!, object: Object!): Comment!
    updateComment(id: Int!, input: CommentInput!): Comment!
    deleteComment(id: Int!, object: Object!): Boolean

    addTeam(input: TeamInput!): Team!
    updateTeam(id: Int!, input: TeamInput!): Team!
    deleteTeam(id: Int!): Boolean

    addNotification(input: NotificationInput!): Notification!
    updateNotification(id: Int!, input: NotificationInput!): Notification!
    deleteNotification(id: Int!): Boolean

    addChat(input: ChatInput!): Chat!
    updateChat(id: Int!, input: ChatInput!): Chat!
    deleteChat(id: Int!): Boolean

    addMessage(input: MessageInput!): Message!
    updateMessage(id: Int!, input: MessageInput!): Message!
    deleteMessage(id: Int!): Boolean

    register(user: AuthInput!): AuthOutput
    login(user: AuthInput!): AuthOutput
}

type Subscription {
    projectAdded(filter: SubscriptionFilter): Project!
    taskAdded(filter: SubscriptionFilter): Task!
    tagAdded(filter: SubscriptionFilter): Tag!
    todoAdded(filter: SubscriptionFilter): Todo!
    commentAdded(filter: SubscriptionFilter): Comment!
    teamAdded(filter: SubscriptionFilter): Team!
    notificationAdded(filter: SubscriptionFilter): Notification!
    eventAdded(filter: SubscriptionFilter): Event!
    chatAdded(filter: SubscriptionFilter): Chat!
    messageAdded(filter: SubscriptionFilter): Message!
    repositoryAdded(filter: SubscriptionFilter): Repository!

    projectUpdated(filter: SubscriptionFilter): Project!
    taskUpdated(filter: SubscriptionFilter): Task!
    tagUpdated(filter: SubscriptionFilter): Tag!
    todoUpdated(filter: SubscriptionFilter): Todo!
    commentUpdated(filter: SubscriptionFilter): Comment!
    teamUpdated(filter: SubscriptionFilter): Team!
    notificationUpdated(filter: SubscriptionFilter): Notification!
    chatUpdated(filter: SubscriptionFilter): Chat!
    messageUpdated(filter: SubscriptionFilter): Message!
    repositoryUpdated(filter: SubscriptionFilter): Repository!

    projectDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    taskDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    tagDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    todoDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    commentDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    teamDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    notificationDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    chatDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    messageDeleted(filter: SubscriptionFilter): ObjectDeletedType!
    repositoryDeleted(filter: SubscriptionFilter): ObjectDeletedType!
}

input SubscriptionFilter {
    assigned_to: Int
    task_id: Int
    project_id: Int
    user_id: Int
    todo_id: Int
    chat_id: Int
    team_id: Int
    id: Int
}

type ObjectDeletedType {
    id: Int!
    object: ObjectType
}

type Role {
    id: Int!
    name: String
}

input AuthInput {
    email: String!
    password: String!
    name: String
    password_confirmation: String
}

type AuthOutput {
    token: String!
    user: User
}

input ProfileInput {
    name: String
    email: String
    avatar: String
    processed_avatar: String
    roles: [Int]
    theme: JSON
    status: String
    bio: String
    profession: String
}

input UserFilter {
    role_id: Int
    profession: String
}

type User {
    id: Int!
    name: String!
    avatar: String
    processed_avatar: String
    roles: [Role]
    theme: JSON
    email: String
    status: String
    bio: String
    profession: String
}

input ProjectInput {
    name: String!
    image: String
    description: String
    users: [Int!]
}

input ProjectsFilter {
    creator_id: Int
}

type Project {
    id: Int!
    name: String!
    image: String
    description: String
    creator: User!
    created_at: Date!
    updated_at: Date!
    users: [User!]!
    repository: String
}

type Repository {
    id: Int
    name: String!
    description: String
    currentBranch: String!
    branches: [String!]!
    commitsCount: Int!
    tagsCount: Int!
    size: Int!
    stars: Int!
    forks: Int!
    lastCommit: Commit
    creator: User!
    users: [User!]!
    project_id: Int!
    files: GraphQLObject!
    extensions: GraphQLObject!
}

input RepositoryInput {
    project_id: Int!
    name: String
    description: String
    users: [Int]
}

input RepositoryFilter {
    project_id: Int
}

type Commit {
    id: ID!
    message: String!
    author: User!
    date: Date!
}

input CommitFilter {
    repository_id: Int
}

type Branch {
    name: String!
    protected: Boolean!
    lastCommit: Commit
}

input BranchFilter {
    repository_id: Int
}

type RepositoryTag {
    name: String!
    shortDescription: String
    description: String
    lastCommit: Commit
}

input RepositoryTagFilter {
    repository_id: Int
}

type MergeRequest {
    name: String!
    description: String
    wip: Boolean!
    author: User!
    targetBranch: String!
    sourceBranch: String!
    assigned_to: User
    tags: [Tag!]!
    approvers: [User]
    requiredApprovals: Int!
    approvals: Int!
    commits: [Commit!]!
    discussions: [Discussion!]!
    comments: [Comment!]!
    created_at: Date!
    updated_at: Date!
}

input MergeRequestFilter {
    repository_id: Int
}

input TaskInput {
    name: String # ! but, it only for updates
    description: String # !
    project_id: Int # !
    assigned_to: Int
    tags: [Int] # !
    comments: [Int]
    position: Int # !
    active: Int
    time: Int
}

input TasksFilter {
    tags: [Int],
    author_id: Int,
    assigned_to: Int,
    project_id: Int,
    active: Int
}

type Task {
    id: Int!
    name: String!
    description: String,
    author: User!
    assigned_to: User
    created_at: Date!
    updated_at: Date!
    tags: [Tag]!
    comments: [Comment]!
    position: Int!
    project_id: Int!
    active: Int!
    time: Int!
}

input TagInput {
    name: String
    color: String
}

type Tag {
    id: Int!
    name: String!
    color: String!
}

input EventFilter {
    type: String
    user_id: Int
    object_id: Int
    object_type: String
    owner_id: Int
    owner_type: String
}

#enum EVENT_TYPE {
#    editing
#    comment
#    done
#    rating
#    approve
#}

type Event {
    id: Int!
    type: String!
    time: Date!
    user: User!
    content: String!
    object: String!
    object_id: Int!
    owner_type: String
    owner_id: Int
}

input NotificationInput {
    type: NOTIFICATION_TYPE!
    content: String!
    time: Date!
    user_id: Int
}

input NotificationFilter {
    type: NOTIFICATION_TYPE
    user_id: Int
}

enum NOTIFICATION_TYPE {
    success
    warning
    info
    error
}

type Notification {
    id: Int!
    type: NOTIFICATION_TYPE!
    content: String!
    time: Date!
    user: User
}

input CommentInput {
    content: String!
    user_id: Int!
    parent_id: Int
}

type Comment {
    id: Int!
    content: String!
    user: User!
    created_at: Date!
    updated_at: Date!
    parent: Comment
    children: [Comment]
    object: ObjectType
}

input DiscussionInput {
    content: String!
    user_id: Int!
}

type Discussion {
    id: Int!
    content: String!
    user: User!
    isResolved: Boolean!
    created_at: Date!
    updated_at: Date!
    object: ObjectType
}

input TodoInput {
    description: String
    tags: [Int]
    date: Date
    done: Int
}

input TodoFilter {
    date: Int
    done: Int
    user_id: Int
}

type Todo {
    id: Int!
    description: String!
    date: Date!
    done: Int!
    user: User!
    tags: [Tag]!
    created_at: Date!
    updated_at: Date!
}

input TeamInput {
    name: String!
    users: [Int!]!
}

type Team {
    id: Int!
    name: String!
    users: [User]!
}

input ChatInput {
    name: String!
    image: String
    users: [Int!]
}

input ChatFilter {
    user_id: Int
}

type Chat {
    id: Int!
    name: String!
    image: String
    users: [User]!
    messages: [Message]!
    totals: Aggregation
    lastMessage: Message
}

input MessageInput {
    content: String!
    chat_id: Int
}

input MessageFilter {
    user_id: Int
    chat_id: Int
}

type Message {
    id: Int!
    content: String!
    user: User!
    chat_id: Int!
    created_at: Date!
    updated_at: Date!
}

input Object {
    name: String!
    id: Int!
}

type ObjectType {
    name: String!
    id: Int!
}

input Pagination {
    limit: Int!
    offset: Int!
    order: [String!]
}

type Aggregation {
    count: Int
    avg: Int
    sum: Int
}


